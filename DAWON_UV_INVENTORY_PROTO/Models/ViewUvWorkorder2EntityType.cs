// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace DAWON_UV_INVENTORY_PROTO.Models
{
    internal partial class ViewUvWorkorder2EntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "DAWON_UV_INVENTORY_PROTO.Models.ViewUvWorkorder2",
                typeof(ViewUvWorkorder2),
                baseEntityType);

            var camFinished = runtimeEntityType.AddProperty(
                "CamFinished",
                typeof(bool?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CamFinished", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CamFinished>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            camFinished.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createTime = runtimeEntityType.AddProperty(
                "CreateTime",
                typeof(DateTime?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CreateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CreateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createTime.AddAnnotation("Relational:ColumnName", "create_time");
            createTime.AddAnnotation("Relational:ColumnType", "datetime");
            createTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custComment = runtimeEntityType.AddProperty(
                "CustComment",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CustComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CustComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            custComment.AddAnnotation("Relational:ColumnName", "cust_comment");
            custComment.AddAnnotation("Relational:ColumnType", "ntext");
            custComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custModelname = runtimeEntityType.AddProperty(
                "CustModelname",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CustModelname", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CustModelname>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            custModelname.AddAnnotation("Relational:ColumnName", "cust_modelname");
            custModelname.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custName = runtimeEntityType.AddProperty(
                "CustName",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CustName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CustName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 30);
            custName.AddAnnotation("Relational:ColumnName", "cust_name");
            custName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custRevision = runtimeEntityType.AddProperty(
                "CustRevision",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CustRevision", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CustRevision>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            custRevision.AddAnnotation("Relational:ColumnName", "cust_revision");
            custRevision.AddAnnotation("Relational:IsFixedLength", true);
            custRevision.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var custToolno = runtimeEntityType.AddProperty(
                "CustToolno",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("CustToolno", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<CustToolno>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            custToolno.AddAnnotation("Relational:ColumnName", "cust_toolno");
            custToolno.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var depth = runtimeEntityType.AddProperty(
                "Depth",
                typeof(decimal?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Depth", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Depth>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            depth.AddAnnotation("Relational:ColumnName", "depth");
            depth.AddAnnotation("Relational:ColumnType", "decimal(7, 3)");
            depth.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var endCustomer = runtimeEntityType.AddProperty(
                "EndCustomer",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("EndCustomer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<EndCustomer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            endCustomer.AddAnnotation("Relational:ColumnName", "end_customer");
            endCustomer.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var formatBg = runtimeEntityType.AddProperty(
                "FormatBg",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("FormatBg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<FormatBg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20,
                unicode: false);
            formatBg.AddAnnotation("Relational:ColumnName", "Format_bg");
            formatBg.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var formatBold = runtimeEntityType.AddProperty(
                "FormatBold",
                typeof(bool?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("FormatBold", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<FormatBold>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            formatBold.AddAnnotation("Relational:ColumnName", "Format_bold");
            formatBold.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var formatFg = runtimeEntityType.AddProperty(
                "FormatFg",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("FormatFg", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<FormatFg>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20,
                unicode: false);
            formatFg.AddAnnotation("Relational:ColumnName", "Format_fg");
            formatFg.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var holeCount = runtimeEntityType.AddProperty(
                "HoleCount",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("HoleCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<HoleCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            holeCount.AddAnnotation("Relational:ColumnName", "hole_count");
            holeCount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            id.AddAnnotation("Relational:ColumnName", "id");
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insulType = runtimeEntityType.AddProperty(
                "InsulType",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("InsulType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<InsulType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 30);
            insulType.AddAnnotation("Relational:ColumnName", "insul_type");
            insulType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDone = runtimeEntityType.AddProperty(
                "IsDone",
                typeof(bool?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("IsDone", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<IsDone>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDone.AddAnnotation("Relational:ColumnName", "isDone");
            isDone.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var layer = runtimeEntityType.AddProperty(
                "Layer",
                typeof(int?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Layer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Layer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            layer.AddAnnotation("Relational:ColumnName", "layer");
            layer.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lotNotes = runtimeEntityType.AddProperty(
                "LotNotes",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("LotNotes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<LotNotes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lotNotes.AddAnnotation("Relational:ColumnName", "lot_notes");
            lotNotes.AddAnnotation("Relational:ColumnType", "ntext");
            lotNotes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lotType = runtimeEntityType.AddProperty(
                "LotType",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("LotType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<LotType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            lotType.AddAnnotation("Relational:ColumnName", "lot_type");
            lotType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lotid = runtimeEntityType.AddProperty(
                "Lotid",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Lotid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Lotid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            lotid.AddAnnotation("Relational:ColumnName", "lotid");
            lotid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var machineCs = runtimeEntityType.AddProperty(
                "MachineCs",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("MachineCs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<MachineCs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            machineCs.AddAnnotation("Relational:ColumnName", "machine_cs");
            machineCs.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var machineSs = runtimeEntityType.AddProperty(
                "MachineSs",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("MachineSs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<MachineSs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            machineSs.AddAnnotation("Relational:ColumnName", "machine_ss");
            machineSs.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mainHoleSize = runtimeEntityType.AddProperty(
                "MainHoleSize",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("MainHoleSize", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<MainHoleSize>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            mainHoleSize.AddAnnotation("Relational:ColumnName", "main_hole_size");
            mainHoleSize.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mesPrcCode = runtimeEntityType.AddProperty(
                "MesPrcCode",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("MesPrcCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<MesPrcCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            mesPrcCode.AddAnnotation("Relational:ColumnName", "mes_prc_code");
            mesPrcCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mesPrcName = runtimeEntityType.AddProperty(
                "MesPrcName",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("MesPrcName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<MesPrcName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 30);
            mesPrcName.AddAnnotation("Relational:ColumnName", "mes_prc_name");
            mesPrcName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var pcs = runtimeEntityType.AddProperty(
                "Pcs",
                typeof(int?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Pcs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Pcs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            pcs.AddAnnotation("Relational:ColumnName", "pcs");
            pcs.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var pnlqty = runtimeEntityType.AddProperty(
                "Pnlqty",
                typeof(short?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Pnlqty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Pnlqty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            pnlqty.AddAnnotation("Relational:ColumnName", "pnlqty");
            pnlqty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prcCode = runtimeEntityType.AddProperty(
                "PrcCode",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("PrcCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<PrcCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            prcCode.AddAnnotation("Relational:ColumnName", "prc_code");
            prcCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prcLayer1 = runtimeEntityType.AddProperty(
                "PrcLayer1",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("PrcLayer1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<PrcLayer1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 9);
            prcLayer1.AddAnnotation("Relational:ColumnName", "prc_layer1");
            prcLayer1.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prcLayer2 = runtimeEntityType.AddProperty(
                "PrcLayer2",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("PrcLayer2", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<PrcLayer2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 9);
            prcLayer2.AddAnnotation("Relational:ColumnName", "prc_layer2");
            prcLayer2.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var prcName = runtimeEntityType.AddProperty(
                "PrcName",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("PrcName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<PrcName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            prcName.AddAnnotation("Relational:ColumnName", "prc_name");
            prcName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productId = runtimeEntityType.AddProperty(
                "ProductId",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("ProductId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<ProductId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            productId.AddAnnotation("Relational:ColumnName", "product_id");
            productId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var productType = runtimeEntityType.AddProperty(
                "ProductType",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("ProductType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<ProductType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            productType.AddAnnotation("Relational:ColumnName", "product_type");
            productType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sampleOrder = runtimeEntityType.AddProperty(
                "SampleOrder",
                typeof(bool?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("SampleOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<SampleOrder>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sampleOrder.AddAnnotation("Relational:ColumnName", "sample_order");
            sampleOrder.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var toolNotes = runtimeEntityType.AddProperty(
                "ToolNotes",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("ToolNotes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<ToolNotes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            toolNotes.AddAnnotation("Relational:ColumnName", "tool_notes");
            toolNotes.AddAnnotation("Relational:ColumnType", "ntext");
            toolNotes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trackinTime = runtimeEntityType.AddProperty(
                "TrackinTime",
                typeof(DateTime?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("TrackinTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<TrackinTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            trackinTime.AddAnnotation("Relational:ColumnName", "trackin_time");
            trackinTime.AddAnnotation("Relational:ColumnType", "datetime");
            trackinTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trackinUsername = runtimeEntityType.AddProperty(
                "TrackinUsername",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("TrackinUsername", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<TrackinUsername>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            trackinUsername.AddAnnotation("Relational:ColumnName", "trackin_username");
            trackinUsername.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trackoutTime = runtimeEntityType.AddProperty(
                "TrackoutTime",
                typeof(DateTime?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("TrackoutTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<TrackoutTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            trackoutTime.AddAnnotation("Relational:ColumnName", "trackout_time");
            trackoutTime.AddAnnotation("Relational:ColumnType", "datetime");
            trackoutTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trackoutUsername = runtimeEntityType.AddProperty(
                "TrackoutUsername",
                typeof(string),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("TrackoutUsername", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<TrackoutUsername>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            trackoutUsername.AddAnnotation("Relational:ColumnName", "trackout_username");
            trackoutUsername.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var txid = runtimeEntityType.AddProperty(
                "Txid",
                typeof(Guid),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("Txid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<Txid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            txid.AddAnnotation("Relational:ColumnName", "txid");
            txid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var waitTrackout = runtimeEntityType.AddProperty(
                "WaitTrackout",
                typeof(bool?),
                propertyInfo: typeof(ViewUvWorkorder2).GetProperty("WaitTrackout", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewUvWorkorder2).GetField("<WaitTrackout>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            waitTrackout.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "view_uv_workorder2");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
