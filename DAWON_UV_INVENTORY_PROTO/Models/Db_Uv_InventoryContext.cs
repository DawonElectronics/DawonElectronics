// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DAWON_UV_INVENTORY_PROTO.Models
{
    public partial class Db_Uv_InventoryContext : DbContext
    {
        public Db_Uv_InventoryContext()
        {
        }

        public Db_Uv_InventoryContext(DbContextOptions<Db_Uv_InventoryContext> options)
            : base(options)
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("server=192.168.0.3;database=db_uv_inventory;user=uv_inventory;password=Ekdnjs3637!");
            }
        }
        public virtual DbSet<TbCustomer> TbCustomer { get; set; }
        public virtual DbSet<TbMachine> TbMachine { get; set; }
        public virtual DbSet<TbPrctype> TbPrctype { get; set; }
        public virtual DbSet<TbUsers> TbUsers { get; set; }
        public virtual DbSet<TbUvToolinfo> TbUvToolinfo { get; set; }
        public virtual DbSet<TbUvWorkorder> TbUvWorkorder { get; set; }
        public virtual DbSet<ViewUvWorkorder> ViewUvWorkorder { get; set; }
        public virtual DbSet<ViewUvWorkorderDone> ViewUvWorkorderDone { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomer>(entity =>
            {
                entity.HasKey(e => e.CustId);

                entity.ToTable("tb_customer");

                entity.HasIndex(e => e.CustCode, "UNIQUE_customer_code")
                    .IsUnique();

                entity.Property(e => e.CustId)
                    .HasMaxLength(10)
                    .HasColumnName("cust_id");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cust_code")
                    .IsFixedLength();

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cust_name");
            });

            modelBuilder.Entity<TbMachine>(entity =>
            {
                entity.HasKey(e => e.MachineId)
                    .HasName("tb_machine_PK");

                entity.ToTable("tb_machine");

                entity.Property(e => e.MachineId)
                    .HasMaxLength(10)
                    .HasColumnName("machine_id");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("department");

                entity.Property(e => e.MachineMaker)
                    .HasMaxLength(50)
                    .HasColumnName("machine_maker");

                entity.Property(e => e.MachineModelname)
                    .HasMaxLength(50)
                    .HasColumnName("machine_modelname");

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("machine_name");

                entity.Property(e => e.MachineShortname)
                    .HasMaxLength(3)
                    .HasColumnName("machine_shortname");
            });

            modelBuilder.Entity<TbPrctype>(entity =>
            {
                entity.HasKey(e => e.PrcCode);

                entity.ToTable("tb_prctype");

                entity.Property(e => e.PrcCode)
                    .HasMaxLength(20)
                    .HasColumnName("prc_code");

                entity.Property(e => e.PrcName)
                    .HasMaxLength(20)
                    .HasColumnName("prc_name");
            });

            modelBuilder.Entity<TbUsers>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("tb_users");

                entity.HasIndex(e => e.UserId, "UNIQUE_user_id")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .HasColumnName("user_id");

                entity.Property(e => e.IsRetired)
                    .HasColumnName("isRetired")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserGroup)
                    .HasMaxLength(20)
                    .HasColumnName("user_group");

                entity.Property(e => e.UserName)
                    .HasMaxLength(20)
                    .HasColumnName("user_name");

                entity.Property(e => e.UserRole)
                    .HasMaxLength(20)
                    .HasColumnName("user_role");
            });

            modelBuilder.Entity<TbUvToolinfo>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_tb_toolinfo");

                entity.ToTable("tb_uv_toolinfo");

                entity.HasIndex(e => new { e.ProductType, e.PrcCode, e.CustToolno }, "IX_tb_toolinfo")
                    .HasFillFactor(100);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(100)
                    .HasColumnName("product_id");

                entity.Property(e => e.ArrayBlk).HasColumnName("array_blk");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CuThickness)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("cu_thickness");

                entity.Property(e => e.CustComment)
                    .HasColumnType("ntext")
                    .HasColumnName("cust_comment");

                entity.Property(e => e.CustId)
                    .HasMaxLength(10)
                    .HasColumnName("cust_id");

                entity.Property(e => e.CustModelname)
                    .HasMaxLength(200)
                    .HasColumnName("cust_modelname");

                entity.Property(e => e.CustName)
                    .HasMaxLength(30)
                    .HasColumnName("cust_name");

                entity.Property(e => e.CustRevision)
                    .HasMaxLength(10)
                    .HasColumnName("cust_revision")
                    .IsFixedLength();

                entity.Property(e => e.CustToolno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cust_toolno");

                entity.Property(e => e.CustomerShipto)
                    .HasMaxLength(200)
                    .HasColumnName("customer_shipto");

                entity.Property(e => e.Depth)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("depth");

                entity.Property(e => e.EndCustomer)
                    .HasMaxLength(100)
                    .HasColumnName("end_customer");

                entity.Property(e => e.HoleCount)
                    .HasMaxLength(50)
                    .HasColumnName("hole_count");

                entity.Property(e => e.HoleCount1)
                    .HasMaxLength(10)
                    .HasColumnName("hole_count_1")
                    .IsFixedLength();

                entity.Property(e => e.HoleCount2)
                    .HasMaxLength(10)
                    .HasColumnName("hole_count_2")
                    .IsFixedLength();

                entity.Property(e => e.HoleCountPth)
                    .HasMaxLength(10)
                    .HasColumnName("hole_count_pth")
                    .IsFixedLength();

                entity.Property(e => e.InsulInfo)
                    .HasColumnType("ntext")
                    .HasColumnName("insul_info");

                entity.Property(e => e.InsulThickness)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("insul_thickness");

                entity.Property(e => e.InsulType)
                    .HasMaxLength(30)
                    .HasColumnName("insul_type");

                entity.Property(e => e.Layer).HasColumnName("layer");

                entity.Property(e => e.LayerStructure).HasMaxLength(10);

                entity.Property(e => e.MainHoleSize)
                    .HasMaxLength(10)
                    .HasColumnName("main_hole_size");

                entity.Property(e => e.MesPrcCode)
                    .HasMaxLength(10)
                    .HasColumnName("mes_prc_code");

                entity.Property(e => e.MesPrcName)
                    .HasMaxLength(30)
                    .HasColumnName("mes_prc_name");

                entity.Property(e => e.MesSeqCode)
                    .HasMaxLength(10)
                    .HasColumnName("mes_seq_code");

                entity.Property(e => e.Pcs).HasColumnName("pcs");

                entity.Property(e => e.Pcsperstrip).HasColumnName("pcsperstrip");

                entity.Property(e => e.PcssizeX)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("pcssize_x");

                entity.Property(e => e.PcssizeY)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("pcssize_y");

                entity.Property(e => e.PrcCode)
                    .HasMaxLength(20)
                    .HasColumnName("prc_code");

                entity.Property(e => e.PrcLayerFrom1)
                    .HasMaxLength(4)
                    .HasColumnName("PrcLayerFrom_1");

                entity.Property(e => e.PrcLayerFrom2)
                    .HasMaxLength(4)
                    .HasColumnName("PrcLayerFrom_2");

                entity.Property(e => e.PrcLayerTo1)
                    .HasMaxLength(4)
                    .HasColumnName("PrcLayerTo_1");

                entity.Property(e => e.PrcLayerTo2)
                    .HasMaxLength(4)
                    .HasColumnName("PrcLayerTo_2");

                entity.Property(e => e.PrcName)
                    .HasMaxLength(20)
                    .HasColumnName("prc_name");

                entity.Property(e => e.PrdCategory).HasMaxLength(200);

                entity.Property(e => e.ProductType)
                    .HasMaxLength(20)
                    .HasColumnName("product_type");

                entity.Property(e => e.Sample).HasColumnName("sample");

                entity.Property(e => e.StackType).HasMaxLength(20);

                entity.Property(e => e.StriparrayBlk).HasColumnName("striparrayBlk");

                entity.Property(e => e.StriparrayCol).HasColumnName("striparrayCol");

                entity.Property(e => e.StriparrayRow).HasColumnName("striparrayRow");

                entity.Property(e => e.ToolNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("tool_notes");

                entity.Property(e => e.WorksizeX)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("worksize_x");

                entity.Property(e => e.WorksizeY)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("worksize_y");

                entity.HasOne(d => d.Cust)
                    .WithMany(p => p.TbUvToolinfo)
                    .HasForeignKey(d => d.CustId)
                    .HasConstraintName("tb_toolinfo_FK_custid");

                entity.HasOne(d => d.PrcCodeNavigation)
                    .WithMany(p => p.TbUvToolinfo)
                    .HasForeignKey(d => d.PrcCode)
                    .HasConstraintName("tb_toolinfo_FK_prccode");
            });

            modelBuilder.Entity<TbUvWorkorder>(entity =>
            {
                entity.ToTable("tb_uv_workorder");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.CustId)
                    .HasMaxLength(10)
                    .HasColumnName("cust_id");

                entity.Property(e => e.IsDone)
                    .HasColumnName("isDone")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted)
                    .HasColumnName("isPrinted")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LotNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("lot_notes");

                entity.Property(e => e.LotType)
                    .HasMaxLength(20)
                    .HasColumnName("lot_type");

                entity.Property(e => e.Lotid)
                    .HasMaxLength(100)
                    .HasColumnName("lotid");

                entity.Property(e => e.MachineCs)
                    .HasMaxLength(300)
                    .HasColumnName("machine_cs");

                entity.Property(e => e.MachineSs)
                    .HasMaxLength(300)
                    .HasColumnName("machine_ss");

                entity.Property(e => e.Pnlqty).HasColumnName("pnlqty");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(100)
                    .HasColumnName("product_id");

                entity.Property(e => e.SampleOrder).HasColumnName("sample_order");

                entity.Property(e => e.TrackinTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trackin_time");

                entity.Property(e => e.TrackinUserId)
                    .HasMaxLength(20)
                    .HasColumnName("trackin_user_id");

                entity.Property(e => e.TrackoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trackout_time");

                entity.Property(e => e.TrackoutUserId)
                    .HasMaxLength(20)
                    .HasColumnName("trackout_user_id");

                entity.Property(e => e.Txid).HasColumnName("txid");

                entity.Property(e => e.WaitTrackout).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Cust)
                    .WithMany(p => p.TbUvWorkorder)
                    .HasForeignKey(d => d.CustId)
                    .HasConstraintName("tb_workorder_FK_custid");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TbUvWorkorder)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("tb_workorder_FK_toolinfo");

                entity.HasOne(d => d.TrackinUser)
                    .WithMany(p => p.TbUvWorkorderTrackinUser)
                    .HasForeignKey(d => d.TrackinUserId)
                    .HasConstraintName("tb_workorder_FK_trackinuserid");

                entity.HasOne(d => d.TrackoutUser)
                    .WithMany(p => p.TbUvWorkorderTrackoutUser)
                    .HasForeignKey(d => d.TrackoutUserId)
                    .HasConstraintName("tb_workorder_FK_trackoutuserid");
            });

            modelBuilder.Entity<ViewUvWorkorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_uv_workorder");

                entity.Property(e => e.ArrayBlk).HasColumnName("array_blk");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.CustComment)
                    .HasColumnType("ntext")
                    .HasColumnName("cust_comment");

                entity.Property(e => e.CustModelname)
                    .HasMaxLength(200)
                    .HasColumnName("cust_modelname");

                entity.Property(e => e.CustName)
                    .HasMaxLength(30)
                    .HasColumnName("cust_name");

                entity.Property(e => e.CustRevision)
                    .HasMaxLength(10)
                    .HasColumnName("cust_revision")
                    .IsFixedLength();

                entity.Property(e => e.CustToolno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cust_toolno");

                entity.Property(e => e.Depth)
                    .HasColumnType("decimal(7, 3)")
                    .HasColumnName("depth");

                entity.Property(e => e.EndCustomer)
                    .HasMaxLength(100)
                    .HasColumnName("end_customer");

                entity.Property(e => e.HoleCount)
                    .HasMaxLength(50)
                    .HasColumnName("hole_count");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InsulType)
                    .HasMaxLength(30)
                    .HasColumnName("insul_type");

                entity.Property(e => e.IsDone).HasColumnName("isDone");

                entity.Property(e => e.IsPrinted).HasColumnName("isPrinted");

                entity.Property(e => e.Layer).HasColumnName("layer");

                entity.Property(e => e.LotNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("lot_notes");

                entity.Property(e => e.LotType)
                    .HasMaxLength(20)
                    .HasColumnName("lot_type");

                entity.Property(e => e.Lotid)
                    .HasMaxLength(100)
                    .HasColumnName("lotid");

                entity.Property(e => e.MachineCs)
                    .HasMaxLength(300)
                    .HasColumnName("machine_cs");

                entity.Property(e => e.MachineSs)
                    .HasMaxLength(300)
                    .HasColumnName("machine_ss");

                entity.Property(e => e.MainHoleSize)
                    .HasMaxLength(10)
                    .HasColumnName("main_hole_size");

                entity.Property(e => e.MesPrcCode)
                    .HasMaxLength(10)
                    .HasColumnName("mes_prc_code");

                entity.Property(e => e.MesPrcName)
                    .HasMaxLength(30)
                    .HasColumnName("mes_prc_name");

                entity.Property(e => e.MesSeqCode)
                    .HasMaxLength(10)
                    .HasColumnName("mes_seq_code");

                entity.Property(e => e.Pcs).HasColumnName("pcs");

                entity.Property(e => e.Pnlqty).HasColumnName("pnlqty");

                entity.Property(e => e.PrcCode)
                    .HasMaxLength(20)
                    .HasColumnName("prc_code");

                entity.Property(e => e.PrcLayer1)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("prc_layer1");

                entity.Property(e => e.PrcLayer2)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("prc_layer2");

                entity.Property(e => e.PrcName)
                    .HasMaxLength(20)
                    .HasColumnName("prc_name");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("product_id");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(20)
                    .HasColumnName("product_type");

                entity.Property(e => e.Sample).HasColumnName("sample");

                entity.Property(e => e.SampleOrder).HasColumnName("sample_order");

                entity.Property(e => e.ToolNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("tool_notes");

                entity.Property(e => e.TrackinTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trackin_time");

                entity.Property(e => e.TrackinUsername)
                    .HasMaxLength(20)
                    .HasColumnName("trackin_username");

                entity.Property(e => e.TrackoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trackout_time");

                entity.Property(e => e.TrackoutUsername)
                    .HasMaxLength(20)
                    .HasColumnName("trackout_username");

                entity.Property(e => e.Txid).HasColumnName("txid");

                entity.Property(e => e.WorksizeX)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("worksize_x");

                entity.Property(e => e.WorksizeY)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("worksize_y");
            });

            modelBuilder.Entity<ViewUvWorkorderDone>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_uv_workorder_done");

                entity.Property(e => e.ArrayBlk).HasColumnName("array_blk");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.CustComment)
                    .HasColumnType("ntext")
                    .HasColumnName("cust_comment");

                entity.Property(e => e.CustModelname)
                    .HasMaxLength(200)
                    .HasColumnName("cust_modelname");

                entity.Property(e => e.CustName)
                    .HasMaxLength(30)
                    .HasColumnName("cust_name");

                entity.Property(e => e.CustRevision)
                    .HasMaxLength(10)
                    .HasColumnName("cust_revision")
                    .IsFixedLength();

                entity.Property(e => e.CustToolno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cust_toolno");

                entity.Property(e => e.Depth)
                    .HasColumnType("decimal(7, 5)")
                    .HasColumnName("depth");

                entity.Property(e => e.EndCustomer)
                    .HasMaxLength(100)
                    .HasColumnName("end_customer");

                entity.Property(e => e.HoleCount)
                    .HasMaxLength(50)
                    .HasColumnName("hole_count");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InsulType)
                    .HasMaxLength(30)
                    .HasColumnName("insul_type");

                entity.Property(e => e.IsDone).HasColumnName("isDone");

                entity.Property(e => e.IsPrinted).HasColumnName("isPrinted");

                entity.Property(e => e.Layer).HasColumnName("layer");

                entity.Property(e => e.LotNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("lot_notes");

                entity.Property(e => e.LotType)
                    .HasMaxLength(20)
                    .HasColumnName("lot_type");

                entity.Property(e => e.Lotid)
                    .HasMaxLength(100)
                    .HasColumnName("lotid");

                entity.Property(e => e.MachineCs)
                    .HasMaxLength(300)
                    .HasColumnName("machine_cs");

                entity.Property(e => e.MachineSs)
                    .HasMaxLength(300)
                    .HasColumnName("machine_ss");

                entity.Property(e => e.MainHoleSize)
                    .HasMaxLength(10)
                    .HasColumnName("main_hole_size");

                entity.Property(e => e.MesPrcCode)
                    .HasMaxLength(10)
                    .HasColumnName("mes_prc_code");

                entity.Property(e => e.MesPrcName)
                    .HasMaxLength(30)
                    .HasColumnName("mes_prc_name");

                entity.Property(e => e.MesSeqCode)
                    .HasMaxLength(10)
                    .HasColumnName("mes_seq_code");

                entity.Property(e => e.Pcs).HasColumnName("pcs");

                entity.Property(e => e.Pnlqty).HasColumnName("pnlqty");

                entity.Property(e => e.PrcCode)
                    .HasMaxLength(20)
                    .HasColumnName("prc_code");

                entity.Property(e => e.PrcLayer1)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("prc_layer1");

                entity.Property(e => e.PrcLayer2)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("prc_layer2");

                entity.Property(e => e.PrcName)
                    .HasMaxLength(20)
                    .HasColumnName("prc_name");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("product_id");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(20)
                    .HasColumnName("product_type");

                entity.Property(e => e.Sample).HasColumnName("sample");

                entity.Property(e => e.SampleOrder).HasColumnName("sample_order");

                entity.Property(e => e.ToolNotes)
                    .HasColumnType("ntext")
                    .HasColumnName("tool_notes");

                entity.Property(e => e.TrackinTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trackin_time");

                entity.Property(e => e.TrackinUsername)
                    .HasMaxLength(20)
                    .HasColumnName("trackin_username");

                entity.Property(e => e.TrackoutTime)
                    .HasColumnType("datetime")
                    .HasColumnName("trackout_time");

                entity.Property(e => e.TrackoutUsername)
                    .HasMaxLength(20)
                    .HasColumnName("trackout_username");

                entity.Property(e => e.Txid).HasColumnName("txid");

                entity.Property(e => e.WorksizeX)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("worksize_x");

                entity.Property(e => e.WorksizeY)
                    .HasColumnType("decimal(6, 2)")
                    .HasColumnName("worksize_y");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}